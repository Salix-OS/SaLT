/---------------------------\
| SaLT: Salix Live Template |
\---------------------------/

INFORMATION:
------------
Set of tools to create a full live environnement for Slackware/Salix using:
  - a custom Live Linux kernel using Aufs2 and Squashfs patches
  - a special initrd template
  - some tools to exploit Live environment

These scripts is a base to help you built a Slackware Live.
It will not build the modules for you or organize the final architecture: it focuses on the initrd.
It could possibly be modified to run other distro than Slackware based.

Based on ideas from LLS (ftp://ftp.slax.org/Linux-Live/) and SLS (https://github.com/godane/slackware-live/).
Why a new project? Because LLS is not compatible with 64 bits and not maintained and SaLT has not the same purpose as SLS.

These scripts could be used for Salix or any other Slackware-compatible distribution, in 32 or 64 bits.
These scripts will not handle all possibilities of LLS or SLS at first. Things will be added further, in a proper way.

Features:
  - boot from initrd.
  - detect partition filesystems:
    * ext4
    * ext3
    * ext2
    * reiserfs
    * xfs
    * fat(16,32)
    * ntfs
    * squashfs
  - mount filesystems.
  - detect the distro partition.
  - detect the save file.
  - create union and add branches.
  - xino (for aufs2) files in tmpfs.
  - hooks installed in writable branch of union, thus no modification of the targetting distro is required.
  - initrd accessible in /mnt/salt
  - can halt/reboot/powerdown the system.
  - eject CD if needed.
  - can use Isolinux or grub2 bootloader.

Known bugs/limitations:
  - kernel must support aufs2 and squashfs.
  - plinks are not supported over aufs2. So hardlink between branches do not work, i.e. files are copied.
  - module must be a squashfs filesystem.
  - save file must be an XFS filesystem.
  - init is the only first process supported and is lookuped in / /sbin /bin /usr/sbin /usr/bin directories.
  - cannot boot only in memory.
  - the save file name is determined at compile-time and cannot be changed at runtime.
  - no kernel cmdline parameters.

Authors:
  - Cyrille Pontvieux <jrd@salixos.org>


CONFIGURATION:
--------------
Two files are used for configuration:
  - config
    used at runtime as /etc/salt.cfg
  - modules
    used at compile-time

'config' file is expecting some variables:
  - LIVE_NAME: only used when displaying some information on boot, enter what your want.
  - IDENT_FILE: default file name to look for to identify the target distro to boot. This file must be in the root directory of the ISO.
  - IDENT_CONTENT: string contains in IDENT_FILE for double-checking.
  - ROOT_DIR: directory that contains dsitro data like modules.

'modules' file is a kernel module file list where each module is on one line. The path starts from /lib/modules/kver/kernel/ where '/' is not mentionned.
Exemple:
drivers/usb/host/ehci-hcd.ko 
drivers/usb/host/ohci-hcd.ko 
drivers/usb/host/uhci-hcd.ko 


COMPILATION:
------------
You need to extract the kernel and modules in a 'kernel' directory.
For exemple, I have this structure in 'kernel' directory:
  $ 'ls' -1 kernel/*
  kernel/boot:
  System.map-2.6.36-smp
  config-2.6.36-smp
  vmlinuz-2.6.36-smp

  kernel/etc:
  rc.d

  kernel/install:
  doinst.sh
  slack-desc

  kernel/lib:
  firmware
  modules

  kernel/usr:
  doc
  src
The script 'create-initrd.sh' will inject the kernel modules listed in 'modules' file from kernel/lib/modules inside the initrd.
The initrd.gz is then created in the current folder


MAKING AN ISO:
--------------
If you want to create an ISO, then:
  - creates your squashfs modules and put them in overlay/$ROOTDIR/modules/. Hint: use a prefix number to order them.
  - create any file or directory you want in your ISO in the overlay directory.
  - create a background image. The result image will be 640x480 in 8bits.
  - invoke the 'create-iso.sh' script with the correct parameters for your ISO. You have the choice of making an ISO with either Isolinux or with Grub2. Grub2 has a nicer menu, which is internationnalized.
