#!/bin/sh
# vim: set syn=sh ai si et sw=2 st=2 ts=2 tw=0:
#
# This file is part of SaLT.
# Copyright: Cyrille Pontvieux <jrd@salixos.org>
# Licence: GPLv3+
# Extra initial script sourced by the "init" script

# load the SaLT library
. /lib/libSaLT

# decompress binaries in /usr/bin
(
  cd /usr/bin
  mkdir /tmp/bin
  for f in *.xz; do
    f2=$(basename $f .xz)
    xzcat $f > /tmp/bin/$f2
    rm $f
    chmod +x /tmp/bin/$f2
    ln -s /tmp/bin/$f2 $f2
  done
)
# decompress /etc/misc
(
  cd /tmp
  tar xf /etc/misc.tar.xz
  cd /etc
  ln -s /tmp/misc .
)

# dialog-like function
dialog() {
  TITLE="$1"
  TYPE="$2"
  MSG="$3"
  CMD="true"
  echo
  echocolornl $COLOR_BOLD $COLOR_BLUE "*** $TITLE ***"
  case "$TYPE" in
    "msgbox")
      echoinfo "$MSG"
      echocolor $COLOR_BOLD $COLOR_CYAN "Press any key "; read JUNK
      ;;
    "yesno")
      echoinfo "$MSG"
      echocolor $COLOR_BOLD $COLOR_CYAN "Yes [y] or No [n] ? "; read JUNK
      if [ -n "$JUNK" ] && [ "$JUNK" = "y" -o "$JUNK" = "Y" ]; then
        CMD="true"
      else
        CMD="false"
      fi
      ;;
  esac
  `$CMD`
}

# Configure the loopback device
configure_loopback() {
  [ -r /etc/HOSTNAME ] || echo 'salixlive.salixos.org' > /etc/HOSTNAME
  export HOSTNAME=$(cat /etc/HOSTNAME)
  /bin/hostname $(cat /etc/HOSTNAME|cut -d. -f1)
  /sbin/ifconfig lo 127.0.0.1
  /sbin/route add -net 127.0.0.0 netmask 255.0.0.0 lo
}

# Function to convert the netmask from CIDR format to dot notation.
cidr_cvt() {
  inform=$1
  if   [ $inform -ge 32 ]; then outform='255.255.255.255'
  elif [ $inform -ge 31 ]; then outform='255.255.255.254'
  elif [ $inform -ge 30 ]; then outform='255.255.255.252'
  elif [ $inform -ge 29 ]; then outform='255.255.255.248'
  elif [ $inform -ge 28 ]; then outform='255.255.255.240'
  elif [ $inform -ge 27 ]; then outform='255.255.255.224'
  elif [ $inform -ge 26 ]; then outform='255.255.255.192'
  elif [ $inform -ge 25 ]; then outform='255.255.255.128'
  elif [ $inform -ge 24 ]; then outform='255.255.255.0'
  elif [ $inform -ge 23 ]; then outform='255.255.254.0'
  elif [ $inform -ge 22 ]; then outform='255.255.252.0'
  elif [ $inform -ge 21 ]; then outform='255.255.248.0'
  elif [ $inform -ge 20 ]; then outform='255.255.240.0'
  elif [ $inform -ge 19 ]; then outform='255.255.224.0'
  elif [ $inform -ge 18 ]; then outform='255.255.192.0'
  elif [ $inform -ge 17 ]; then outform='255.255.128.0'
  elif [ $inform -ge 16 ]; then outform='255.255.0.0'
  elif [ $inform -ge 15 ]; then outform='255.254.0.0'
  elif [ $inform -ge 14 ]; then outform='255.252.0.0'
  elif [ $inform -ge 13 ]; then outform='255.248.0.0'
  elif [ $inform -ge 12 ]; then outform='255.240.0.0'
  elif [ $inform -ge 11 ]; then outform='255.224.0.0'
  elif [ $inform -ge 10 ]; then outform='255.192.0.0'
  elif [ $inform -ge 9 ]; then outform='255.128.0.0'
  elif [ $inform -ge 8 ]; then outform='255.0.0.0'
  elif [ $inform -ge 7 ]; then outform='254.0.0.0'
  elif [ $inform -ge 6 ]; then outform='252.0.0.0'
  elif [ $inform -ge 5 ]; then outform='248.0.0.0'
  elif [ $inform -ge 4 ]; then outform='240.0.0.0'
  elif [ $inform -ge 3 ]; then outform='224.0.0.0'
  elif [ $inform -ge 2 ]; then outform='192.0.0.0'
  elif [ $inform -ge 1 ]; then outform='128.0.0.0'
  elif [ $inform -ge 0 ]; then outform='0.0.0.0'
  fi
  echo $outform
}

# Find, load ethernet module, configure ethernet connection
configure_ethernet() {
  # commandline format is 'nic=[driver]:[interface]:<dhcp|static>:ip:mask:gw'
  # if driver or interface is emply, autoconfiguration is try
  DRIVER=''
  INTERFACE=''
  ENET_MODE='dhcp'
  IPADDRESS=''
  NETMASK=''
  GATEWAY=''
  NIC=$(get_value_cmdline nic)
  if is_on_cmdline skipnetcheck; then
    SKIP_NET_CHECK=true
  else
    SKIP_NET_CHECK=false
  fi
  if [ -n "$NIC" ]; then
    DRIVER=$(echo "$NIC"|cut -d: -f1)
    INTERFACE=$(echo "$NIC"|cut -d: -f2)
    ENET_MODE=$(echo "$NIC"|cut -d: -f3)
    IPADDRESS=$(echo "$NIC"|cut -d: -f4)
    NETMASK=$(echo "$NIC"|cut -d: -f5)
    GATEWAY=$(echo "$NIC"|cut -d: -f6)
  fi
  unset NIC
  if [ -n "$DRIVER" ]; then
    modprobe $DRIVER >/dev/null 2>&1
  else
    SKIPASK=true
    while true; do
      if [ "$SKIPASK" = "false" ]; then
        dialog 'PROBING NETWORK DEVICES' msgbox 'You will now get a chance to probe your network interfaces.'
      fi
      sh lib/network.sh $SKIPASK
      DRIVER=$(cat /tmp/cardfound)
      SKIPASK=false
      if [ "$SKIP_NET_CHECK" = "false" ]; then
        ip addr show
        dialog 'PROBING NETWORK DEVICES' yesno 'Are you OK with the network interface which was detected?
If not, select "No" to get back to the network probe program.
You can try to load another driver explicitly,
by using "P <driver_name>".

If you are satisfied, select "Yes" to continue with network configuration.'
      else
        true
      fi
      if [ $? = 0 ]; then
        break
      else
        modprobe -r $DRIVER 2>/dev/null
      fi
    done
  fi
  if [ -z "$INTERFACE" ]; then
    # Find the loaded interface
    INTERFACE=$(grep : /proc/net/dev|grep -v lo:|head -n 1|sed 's/ *\(.*\):.*/\1/')
    if [ -z "$INTERFACE" ]; then
      INTERFACE=eth0
    fi
  fi
  if [ -z "$ENET_MODE" ]; then
    ENET_MODE='dhcp'
  fi
  if [ "$ENET_MODE" != "dhcp" -a "$ENET_MODE" != "static" ]; then
    echowarn "Ethernet mode should be 'dhcp' or 'static'. Value '$ENET_MODE' not recognized. Will use dhcp."
    ENET_MODE='dhcp'
  fi
  if [ "$ENET_MODE" = "dhcp" ]; then
    cat <<'EOF' > /tmp/netscript
#!/bin/sh
case "$1" in
  "deconfig")
    ifconfig $interface 0.0.0.0 up
    rm -f /tmp/netinfos
    ;;
  "bound"|"renew")
    export | grep ' ip\| mask\| router\| serverid' > /tmp/netinfos
    ;;
esac
EOF
    chmod +x /tmp/netscript
    udhcpc -i $INTERFACE -t 3 -A 1 -n -q -s /tmp/netscript | sed 's/^/  /'
    if [ -r /tmp/netinfos ]; then
      . /tmp/netinfos
      IPADDRESS=$ip; unset ip
      NETMASK=$(cidr_cvt $mask); unset mask
      if [ -n "$router" ]; then
        for r in $router; do
          if [ -z $GATEWAY ]; then
            GATEWAY=$r
          else
            break;
          fi
        done
        unset router
      fi
    else
      echoerror "DHCP failed."
    fi
    debugshell
  else
    if [ -z "$IPADDRESS" ]; then
      echoerror "Static failed because not ip address was provided."
    fi
  fi
  CONFIGURED=false
  while [ -z "$IPADDRESS" ]; do
    echoerror "Could not find a way to configure your network."
    echoerror "A shell is now presented to you to try to make it work."
    echo
    hush
    echo
    INTERFACE=$(grep : /proc/net/dev|grep -v lo:|head -n 1|sed 's/ *\(.*\):.*/\1/')
    if [ -n "$INTERFACE" ]; then
      IPADDRESS=$(ip -f inet addr show $INTERFACE|grep inet|sed 's: *inet \(.*\)/.*:\1:')
      [ -n "$IPADDRESS" ] && CONFIGURED=true
    else
      IPADDRESS=''
    fi
  done
  if [ "$CONFIGURED" = "false" ]; then
    CMD="ifconfig $INTERFACE $IPADDRESS"
    if [ -n "$NETMASK" ]; then
      CMD="$CMD netmask $NETMASK"
    fi
    $($CMD)
    if [ -n "$GATEWAY" ]; then
      route add default gw $GATEWAY dev $INTERFACE
    fi
  fi
}

# $1 = remote protocol.
# Format is 'remote=protocol,remoteserver[:portnumber],rootpath'
# If empty, will use the protocol NFS, with the remoteserver=serverid and rootpath=/tftpboot/salixlive/iso
mount_remote_endpoint() {
  RPROTOCOL=''
  RSERVER=''
  RPATH=''
  REMOTE="$1"
  if [ -n "$REMOTE" ]; then
    RPROTOCOL=$(echo "$REMOTE"|cut -d, -f1)
    RSERVER=$(echo "$REMOTE"|cut -d, -f2)
    RPATH=$(echo "$REMOTE"|cut -d, -f3)
  else
    RPROTOCOL=nfs
    RSERVER=$(grep serverid /tmp/netinfos | sed "s/export serverid='\(.*\)'/\1/")
    RPATH=/ftfpboot/salixlive/iso
  fi
  unset REMOTE
  rm -f /tmp/distro_infos
  if [ -z "$RPROTOCOL" -o -z "$RSERVER" -o -z "$RPATH" ]; then
    echoerror "Could not find how to fetch the iso data."
    echoerror "Please configure the 'remote' kernel cheatcode with:"
    echoerror "  'remote=protocol,remoteserver,rootpath'"
    echoerror "protocol could be nfs, ftp, http, ssh or smb"
    echoerror "remoteserver should be the address ip."
    echoerror "  It could also contains in addition:"
    echoerror "  - :portnumber (nfs, ftp, ssh)"
    echoerror "  - :user:password (ftp, ssh*, smb)"
    echoerror "    * no password for ssh, it will be asked"
    echoerror "rootpath should point the the ISO content or"
    echoerror "  directly to the ISO file for HTTP."
  else
    case "$RPROTOCOL" in
      'nfs')
        RPORT=''
        echo $RSERVER | grep -q ':' && RPORT=$(echo $RSERVER|cut -d: -f2)
        RSERVER=$(echo $RSERVER|cut -d: -f1)
        sh lib/libNFS.sh "$RSERVER" "$RPORT" "$RPATH"
        ;;
      'ftp')
        RPORT=''
        RUSER=''
        RPWD=''
        echo $RSERVER | grep -q ':'
        if [ $? -eq 0 ]; then
          RPORT=$(echo $RSERVER|cut -d: -f2)
          RUSER=$(echo $RSERVER|cut -d: -f3)
          RPWD=$(echo $RSERVER|cut -d: -f4)
        fi
        RSERVER=$(echo $RSERVER|cut -d: -f1)
        sh lib/libFTP.sh "$RSERVER" "$RPORT" "$RUSER" "$RPWD" "$RPATH"
        ;;
      'http')
        RPORT=''
        echo $RSERVER | grep -q ':'
        if [ $? -eq 0 ]; then
          RPORT=$(echo $RSERVER|cut -d: -f2)
        fi
        RSERVER=$(echo $RSERVER|cut -d: -f1)
        sh lib/libHTTP.sh "$RSERVER" "$RPORT" "$RPATH"
        ;;
      'ssh')
        RPORT=''
        RUSER='root'
        echo $RSERVER | grep -q ':'
        if [ $? -eq 0 ]; then
          RPORT=$(echo $RSERVER|cut -d: -f2)
          RUSER=$(echo $RSERVER|cut -d: -f3)
        fi
        RSERVER=$(echo $RSERVER|cut -d: -f1)
        sh lib/libSSH.sh "$RSERVER" "$RPORT" "$RUSER" "$RPATH"
        ;;
      'smb')
        RUSER=''
        RPWD=''
        echo $RSERVER | grep -q ':'
        if [ $? -eq 0 ]; then
          RUSER=$(echo $RSERVER|cut -d: -f2)
          RPWD=$(echo $RSERVER|cut -d: -f3)
        fi
        RSERVER=$(echo $RSERVER|cut -d: -f1)
        sh lib/libSmb.sh "$RSERVER" "$RUSER" "$RPWD" "$RPATH"
        ;;
      *)
        echoerror "Protocol '$RPROTOCOL' not recognized"
    esac
  fi
}

infolog 'Loading extra initial script...'
configure_loopback
debugshell
configure_ethernet
debugshell
remote=$(get_value_cmdline remote)
while true; do
  mount_remote_endpoint "$remote"
  if [ -r /tmp/distro_infos ]; then
    break
  else
    echocolor $COLOR_BOLD $COLOR_CYAN 'remote='
    read remote;
    echo
  fi
done
debugshell
infolog 'End extra initial script'
