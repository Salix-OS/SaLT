#! /usr/bin/env python
# -*- coding: utf-8 -*-
import sys, os
from subprocess import *
import glob

os.chdir(os.path.dirname(os.path.abspath(sys.argv[0])))
cwd = os.getcwd()

################################
##      EDIT BELOW HERE       ##
################################

# this list defines the available languages, which should be used
# to generate the menu
langavailable = [
    # seems to be the most neutral arabic locale, us keyboard seems to be a good compromise
    # locale: the real locale on a Linux system.
    # polang: the name of the XX.po as translated by Transifex.
    # g2lang: the name of the /usr/share/locale/XX/LC_MESSAGES/grub.mo for already translated grub2 messages (grub2 does not follow the regular Linux locale scheme :-/ ). It could be none if there is no grub2 translation for it yet.
    # locale,      polang,  g2lang,      name,                      nativename,              Console keyboard layout
    ['ar_SA.utf8', 'ar',    'en@arabic', 'Arabic',                  'العربية',               ['us']],
    ['cs_CZ.utf8', 'cs',    None,        'Czech',                   'Česky',                 ['cz']],
    ['da_DK.utf8', 'da',    'da',        'Danish',                  'Dansk',                 ['dk']],
    ['de_DE.utf8', 'de',    'de',        'German',                  'Deutsch',               ['de']],
    ['en_US',      'en',    None,        'English (US)',            None,                    ['us']],
    ['en_GB.utf8', 'en',    None,        'English (GB)',            None,                    ['uk']],
    ['es_ES.utf8', 'es',    None,        'Spanish (Castilian)',    'Español (Castellano)',   ['es']],
    ['es_AR.utf8', 'es_AR', None,        'Spanish (Argentinian)',  'Español (Argentina)',    ['es']],
    ['fr_FR.utf8', 'fr',    'fr',        'French',                 'Français',               ['fr-latin9']],
    ['el_GR.utf8', 'el',    'en@greek',  'Greek',                  'Ελληνικά',               ['gr']],
    ['he.utf8',    'he',    'en@hebrew', 'Hebrew',                 'עִבְרִית',                  ['il']],
    ['hu_HU.utf8', 'hu',    'hu',        'Hungarian',              'Magyar',                 ['hu']],
    ['it_IT.utf8', 'it',    'it',        'Italian',                'Italiano',               ['it']],
    ['ja_JP.utf8', 'ja',    'ja',        'Japanese',               '日本語',                 ['jp106']],
    ['lt_LT.utf8', 'lt',    None,        'Lithuanian',             'Lietuviy',               ['lt']],
    ['nl_NL.utf8', 'nl',    'nl',        'Dutch',                  'Nederlands',             ['nl']],
    ['pl_PL.utf8', 'pl',    'pl',        'Polish',                 'Polski',                 ['pl']],
    ['pt_BR.utf8', 'pt_BR', None,        'Portuguese (Brazilian)', 'Português (Brasileiro)', ['br-abnt2']],
    ['pt_PT.utf8', 'pt_PT', None,        'Portuguese (European)',  'Português (Europeu)',    ['pt-latin1']],
    ['ru_RU.utf8', 'ru',    'ru',        'Russian',                'Русский',                ['ru_win']],
    ['sv_SE.utf8', 'sv',    'sv',        'Swedish',                'Svenska',                ['sv-latin1']],
    ['tr_TR.utf8', 'tr',    None,        'Turkish',                'Türkçe',                 ['trq']],
    ['uk_UA.utf8', 'uk',    'uk',        'Ukrainian',              'Українська',             ['ua']],
  ]

kbmenuentry = """
menuentry "{title}"{hotkey} --class=keyboard {{
  set salt_kb="{title}"
  set salt_kbnum="{num}"
  nextconfig
}}
"""

langmenuentry = """
menuentry "{title}"{hotkey} --class=locale {{
  set salt_langnum="{lang_num}"
  set salt_locale="{locale}"
  set _lang="{lang}"
  set salt_kb="{key}"
  set salt_kbnum="{key_num}"
  nextconfig
}}
"""

zonemenuentry = """
menuentry "{title}" --class=clock {{
  set salt_timezone="{title}"
  nextconfig
}}
"""

timezonemenuentry = """
menuentry "{title}" --class=clock {{
  set salt_timezone="${{salt_timezone}}/{title}"
  nextconfig
}}
"""

# which field to display as name
displayname = 'nativename'

# the sort order used by getlangavail, i.e. by the language menu
langsortkey = displayname

# put here some defaults
defaultlocale = 'en_US'
defaulttz = 'UTC'

##################################
##       EDIT ABOVE HERE        ##
##################################

langdict = [ 'locale', 'polang', 'g2lang', 'name', 'nativename', 'kb']

# returns a sorted list of dictionaries describing the available langs
# If nativename is empty it changes it to equal name.
def getlangavail():
  temp = [dict(zip(langdict, lang)) for lang in langavailable]
  for lang in temp:
    if lang['nativename'] == None:
      lang['nativename'] = lang['name']
  return sorted(temp, key=lambda lang: lang[langsortkey])

# returns a sorted dict of all available kb layouts
def getkbs():
  tempkbs = []
  for lang in getlangavail():
    for kb in lang['kb']:
      tempkbs.append(kb)
  tempkbs = sorted(set(tempkbs)) # ensure we have no duplicates
  return dict(enumerate(tempkbs))

# returns a sorted list of all available time zones (by zone)
def gettimezones():
  zones = sorted(map(os.path.basename, filter(lambda f: os.path.isdir(f), glob.glob('/usr/share/zoneinfo/[A-Z]*'))))
  tz = []
  for z in zones:
    tz.append((z, sorted(map(os.path.basename, glob.glob('/usr/share/zoneinfo/' + z + '/*')))))
  return tz

# This is the inverse dictionary for a given dict
# i.e. 'de' -> 0 instead of 0 -> 'de'
# In map each value needs to be unique
def inversedict(map):
  return dict((v, k) for k, v in map.iteritems())

# Generates the file cfg using tpl as header and kbmenuentry as
# template for each keyboard layout in kbs.
def genkbcfg(tpl, cfg, kbs):
  with open(tpl, 'r') as ftpl:
    with open(cfg, 'w') as fcfg:
      fcfg.write(ftpl.read())
      lasthotkey = ''
      for k, v in kbs.iteritems():
        hotkey = str.lower(v[0])
        if hotkey == lasthotkey or hotkey in [ 'c', 'e' ]:
          hotkey = ''
        if hotkey != '':
          lasthotkey = hotkey
          hotkey = ' --hotkey ' + hotkey
        fcfg.write(kbmenuentry.format(title = v, hotkey = hotkey, num = k))

def genlangcfg(tpl, cfg, langs, invkbs, invlanglocale):
  with open(tpl, 'r') as ftpl:
    with open(cfg, 'w') as fcfg:
      fcfg.write(ftpl.read())
      fcfg.write('\n')
      lasthotkey = ''
      for l in langs:
        name = l['nativename']
        hotkey = str.lower(name[0])
        if hotkey == lasthotkey or hotkey in [ 'c', 'e' ]:
          hotkey = ''
        if hotkey != '':
          lasthotkey = hotkey
          hotkey = ' --hotkey ' + hotkey
        loc = l['locale']
        num = invlanglocale[loc]
        lang = l['polang']
        kb = l['kb'][0]  # first element is the default
        kbnum = invkbs[kb]  # look the position up
        fcfg.write(langmenuentry.format(title = name, hotkey = hotkey, lang_num = num, locale = loc, lang = lang, key = kb, key_num = kbnum))

def genzones(tpl, cfg, timezones):
  with open(tpl, 'r') as ftpl:
    with open(cfg, 'w') as fcfg:
      fcfg.write(ftpl.read())
      fcfg.write('\n')
      for tz in timezones:
        zone = tz[0]
        fcfg.write(zonemenuentry.format(title = zone))

def gentimezone(tpl, tzdir, zone, cities):
  with open(tpl, 'r') as ftpl:
    with open(tzdir + '/' + zone + '.cfg', 'w') as fcfg:
      fcfg.write(ftpl.read())
      fcfg.write('\n')
      for city in cities:
        fcfg.write(timezonemenuentry.format(title = city))

def main():
  for dir in [cfgdir, kbdir, tzdir]:
    if not os.path.isdir(dir):
      os.makedirs(dir)
  
  if kbdir == '':
    print "error: you must set kbdir"

  kbs = getkbs()
  invkbs = inversedict(getkbs())
  langs = getlangavail()
  invlanglocale = inversedict(dict(enumerate([lang['locale'] for lang in langs])))
  timezones = gettimezones()

  genkbcfg(kbtpl, kbcfg, kbs)
  genlangcfg(langtpl, langcfg, langs, invkbs, invlanglocale)
  genzones(zonetpl, timezonecfg, timezones)
  for tz in timezones:
    gentimezone(tztpl, tzdir, tz[0], tz[1])
  
  kmaps = [line.strip() for line in open(keympas_path, 'r')]
  for k, kb in kbs.iteritems():
    os.chdir(kbdir)
    for kmap in kmaps:
      if len(kmap) > 0 and kmap[0] != '#' and kmap.split('|')[0] == kb:
        xkb = kmap.split('|')[1].split(',')[0]
        xkb_opts = xkb + " " + kmap.split('|')[2].split(',')[0]
        break
    if xkb == None:
      xkb = kb
      xkb_opts = xkb
    xkb_opts = '-o ' + xkb + '.gkb ' + xkb_opts
    print 'grub-kbdcomp ' + xkb_opts
    os.system('grub-kbdcomp ' + xkb_opts)
    if os.path.isfile(xkb + '.gkb') and os.stat(xkb + '.gkb').st_size == 0:
      os.remove(xkb + '.gkb')
    if os.path.isfile(xkb + '.gkb') and kb != xkb:
      os.rename(xkb + '.gkb', kb + '.gkb')

def usage():
  print """
Use this script to generate the translations, the language,
the keyboard selection menu and the timezone menus.
It should be called like this:
  generate dumpkbs
    OR
  generate findg2lang <polang>
    OR
  generate <cfgdir> <kbdir> <keymaps_path> <tzdir>

Usually such values should be fine:
cfgdir = <someprefix>/boot/grub
kbdir = <someprefix>/boot/grub/keymaps
keympas_path = <someprefix>/keymaps
  text file in the format:
    keymap|XkbLayout|XkbVariant|XkbOptions
tzdir = <someprefix>/boot/grub/timezone

"""


if len(sys.argv) == 1:
  usage()
  sys.exit(1)

if sys.argv[1] == 'dumpkbs':
  for k, kb in getkbs().iteritems():
    print kb
  sys.exit()
elif len(sys.argv) == 3 and sys.argv[1] == 'findg2lang':
  polang = sys.argv[2]
  found = False
  for lang in getlangavail():
    if lang['polang'] == polang:
      found = True
      if lang['g2lang'] != None:
        print lang['g2lang']
      break
  if found:
    sys.exit(0)
  else:
    sys.exit(1)
elif len(sys.argv) < 5:
  usage()
  sys.exit(1)
else:
  # Here we "parse" commandline arguments
  cfgdir = sys.argv[1]  # where to store generated .cfg files
  kbdir = sys.argv[2] # where to store grub keymaps
  keympas_path = sys.argv[3] # where there is the matching for console keymap to X keymap
  tzdir = sys.argv[4] # where to store time zones

  kbtpl = os.path.join(cwd, 'keyboard.cfg.tpl')
  langtpl = os.path.join(cwd, 'lang.cfg.tpl')
  zonetpl = os.path.join(cwd, 'zone.cfg.tpl')
  tztpl = os.path.join(cwd, 'tz.cfg.tpl')
  kbcfg = os.path.join(cfgdir, 'keyboard.cfg')
  langcfg = os.path.join(cfgdir, 'lang.cfg')
  timezonecfg = os.path.join(cfgdir, 'timezone.cfg')
  main()
