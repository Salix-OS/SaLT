#! /usr/bin/env python
# -*- coding: utf-8 -*-
import sys, os
from subprocess import *
import glob
from math import ceil

os.chdir(os.path.dirname(os.path.abspath(sys.argv[0])))
cwd = os.getcwd()
from generate_cfg import *
langdict = [ 'locale', 'polang', 'g2lang', 'name', 'nativename', 'kb']

# This is the inverse dictionary for a given dict
# i.e. 'de' -> 0 instead of 0 -> 'de'
# In map each value needs to be unique
def inversedict(map):
  return dict((v, k) for k, v in map.iteritems())

# returns a sorted list of dictionaries describing the available langs
# If nativename is empty it changes it to equal name.
def getlangavail():
  temp = [dict(zip(langdict, lang)) for lang in langavailable]
  for lang in temp:
    if lang['nativename'] == None:
      lang['nativename'] = lang['name']
  return sorted(temp, key=lambda lang: lang[langsortkey])

# returns a sorted dict of all available kb layouts
def getkbs():
  tempkbs = []
  for lang in getlangavail():
    for kb in lang['kb']:
      tempkbs.append(kb)
  tempkbs = sorted(set(tempkbs)) # ensure we have no duplicates
  return dict(enumerate(tempkbs))

# Generates the file cfg using tpl as header and kbmenuentry as
# template for each keyboard layout in kbs.
def genkbcfg(tpl, cfg, kbs, keymaps):
  with open(tpl, 'r') as ftpl:
    with open(cfg, 'w') as fcfg:
      fcfg.write(ftpl.read())
      fcfg.write("set available_layouts='{0}'\n".format(' '.join([keymap.split('|')[0] for keymap in keymaps])))
      lasthotkey = ''
      for k, v in kbs.iteritems():
        hotkey = str.lower(v[0])
        if hotkey == lasthotkey or hotkey in [ 'c', 'e' ]:
          hotkey = ''
        if hotkey != '':
          lasthotkey = hotkey
          hotkey = ' --hotkey ' + hotkey
        fcfg.write(kbmenuentry.format(title = v, hotkey = hotkey, num = k))

def genlangcfg(tpl, cfg, langs, invkbs, invlanglocale):
  with open(tpl, 'r') as ftpl:
    with open(cfg, 'w') as fcfg:
      fcfg.write(ftpl.read())
      fcfg.write(langpremenu.format(deflocale = defaultlocale, deflangnum = invlanglocale[defaultlocale], deflang = langs[invlanglocale[defaultlocale]]['polang']))
      lasthotkey = ''
      for l in langs:
        name = l['nativename']
        hotkey = str.lower(name[0])
        if hotkey == lasthotkey or hotkey in [ 'c', 'e' ]:
          hotkey = ''
        if hotkey != '':
          lasthotkey = hotkey
          hotkey = ' --hotkey ' + hotkey
        loc = l['locale']
        num = invlanglocale[loc]
        lang = l['polang']
        kb = l['kb'][0]  # first element is the default
        fcfg.write(langmenuentry.format(title = name, hotkey = hotkey, lang_num = num, locale = loc, lang = lang, key = kb))

def main():
  for dir in [cfgdir, kbdir]:
    if not os.path.isdir(dir):
      os.makedirs(dir)
  if kbdir == '':
    print "error: you must set kbdir"
  kbs = getkbs()
  invkbs = inversedict(getkbs())
  langs = getlangavail()
  invlanglocale = inversedict(dict(enumerate([lang['locale'] for lang in langs])))
  kmaps = [line.strip() for line in open(keympas_path, 'r') if len(line) > 0 and line[0] != '#']
  for k, kb in kbs.iteritems():
    os.chdir(kbdir)
    for kmap in kmaps:
      if kmap.split('|')[0] == kb:
        xkb = kmap.split('|')[1].split(',')[0]
        xkb_opts = xkb + " " + kmap.split('|')[2].split(',')[0]
        break
    if xkb == None:
      xkb = kb
      xkb_opts = xkb
    xkb_opts = '-o ' + xkb + '.gkb ' + xkb_opts
    print 'grub-kbdcomp ' + xkb_opts
    os.system('grub-kbdcomp ' + xkb_opts + '>/dev/null 2>&1')
    if os.path.isfile(xkb + '.gkb') and os.stat(xkb + '.gkb').st_size == 0:
      os.remove(xkb + '.gkb')
    if os.path.isfile(xkb + '.gkb') and kb != xkb:
      os.rename(xkb + '.gkb', kb + '.gkb')
  genkbcfg(kbtpl, kbcfg, kbs, kmaps)
  genlangcfg(langtpl, langcfg, langs, invkbs, invlanglocale)

def usage():
  print """
Use this script to generate the translations, the language
and the keyboard selection menu.
It should be called like this:
  generate dumpkbs
    OR
  generate findg2lang <polang>
    OR
  generate <cfgdir> <kbdir> <keymaps_path>

Usually such values should be fine:
cfgdir = <someprefix>/boot/grub
kbdir = <someprefix>/boot/grub/keymaps
keympas_path = <someprefix>/keymaps
  text file in the format:
    keymap|XkbLayout|XkbVariant|XkbOptions

"""


if len(sys.argv) == 1:
  usage()
  sys.exit(1)

if sys.argv[1] == 'dumpkbs':
  for k, kb in getkbs().iteritems():
    print kb
  sys.exit()
elif len(sys.argv) == 3 and sys.argv[1] == 'findg2lang':
  polang = sys.argv[2]
  found = False
  for lang in getlangavail():
    if lang['polang'] == polang:
      found = True
      if lang['g2lang'] != None:
        print lang['g2lang']
      break
  if found:
    sys.exit(0)
  else:
    sys.exit(1)
elif len(sys.argv) < 4:
  usage()
  sys.exit(1)
else:
  # Here we "parse" commandline arguments
  cfgdir = sys.argv[1]  # where to store generated .cfg files
  kbdir = sys.argv[2] # where to store grub keymaps
  keympas_path = sys.argv[3] # where there is the matching for console keymap to X keymap

  kbtpl = os.path.join(cwd, 'keyboard.cfg.tpl')
  langtpl = os.path.join(cwd, 'lang.cfg.tpl')
  langcfg = os.path.join(cfgdir, 'lang.cfg')
  kbcfg = os.path.join(cfgdir, 'keyboard.cfg')
  main()
