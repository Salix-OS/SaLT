#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
Use this script to generate the translations, the language,
the keyboard selection menu and the timezone menus.
It should be called like this:
./generate <localecfgdir> <cfgdir> <kbdir> <tzdir> <volumename>

Usually such values should be fine:
localecfgdir = <someprefix>/boot/grub/locale
cfgdir = <someprefix>/boot/grub
kbdir = <someprefix>/boot/grub/keymaps
tzdir = <someprefix>/boot/grub/timezone
volumename = SalixLive

"""

import sys, os
import locale
import gettext
import glob

projectname = "generate"
os.chdir(os.path.dirname(os.path.abspath(sys.argv[0])))
cwd = os.getcwd()
localedir = os.path.join(cwd, "locale")  # where tranlsations are stored

if sys.argv[1] != 'dumpkbs':
  # Here we "parse" commandline arguments
  localecfgdir = sys.argv[1];  # where to store the <locale>.cfg files
  cfgdir = sys.argv[2];  # where to store all other .cfg files
  kbdir = sys.argv[3]; # where to store grub keymaps
  tzdir = sys.argv[4]; # where to store time zones
  volumename = sys.argv[5]; # volume name to use

  kbtpl = os.path.join(cwd, 'keyboard.cfg.tpl')
  langtpl = os.path.join(cwd, 'lang.cfg.tpl')
  zonetpl = os.path.join(cwd, 'zone.cfg.tpl')
  tztpl = os.path.join(cwd, 'tz.cfg.tpl')
  kbcfg = os.path.join(cfgdir, 'keyboard.cfg')
  langcfg = os.path.join(cfgdir, 'lang.cfg')
  timezonecfg = os.path.join(cfgdir, 'timezone.cfg')

# Initialize gettext
gettext.bindtextdomain(projectname, localedir)
gettext.textdomain(projectname)
_ = gettext.gettext


################################
################################
##      EDIT BELOW HERE       ##
################################

# this list defines the available languages, which should be used
# to generate the menu
langavailable = [
    # locale, name, nativename, keyboard layout
    ['cs_CZ.utf8', 'Czech', 'Česky', ['cz']],
    ['da_DK.utf8', 'Danish', 'Dansk', ['dk']],
    ['de_DE.utf8', 'German', 'Deutsch', ['de']],
    ['en_US',      'English (US)', None, ['us']],
    ['en_GB.utf8', 'English (GB)', None, ['uk']],
    ['es_ES.utf8', 'Spanish (Castilian)', 'Español (Castellano)', ['es']],
    ['es_AR.utf8', 'Spanish (Argentinian)', 'Español (Argentina)', ['es']],
    ['fr_FR.utf8', 'French', 'Français', ['fr-latin9']],
    ['el_GR.utf8', 'Greek', 'Ελληνικά', ['gr']],
    ['he.utf8',    'Hebrew', 'עִבְרִית', ['il']],
    ['it_IT.utf8', 'Italian', 'Italiano', ['it']],
    ['ja_JP.utf8', 'Japanese', '日本語', ['jp106']],
    ['lt_LT.utf8', 'Lithuanian', 'Lietuviy', ['lt']],
    ['hu_HU.utf8', 'Hungarian', 'Magyar', ['hu']],
    ['nl_NL.utf8', 'Dutch', 'Nederlands', ['nl']],
    ['pl_PL.utf8', 'Polish', 'Polski', ['pl']],
    ['pt_PT.utf8', 'Portuguese (European)', 'Português (Europeu)', ['pt-latin1']],
    ['pt_BR.utf8', 'Portuguese (Brazilian)', 'Português (Brasileiro)', ['br-abnt2']],
    ['ru_RU.utf8', 'Russian', 'Русский', ['ru_win']],
    ['sv_SE.utf8', 'Swedish', 'Svenska', ['sv-latin1']],
    ['tr_TR.utf8', 'Turkish', 'Türkçe', ['trq']],
    ['uk_UA.utf8', 'Ukrainian', 'Українська', ['ua']],
    ]

# We need to ensure gettext is called on those strings at call time and
# not earlier. Otherwise we couldn't iterate over the needed/available
# translations
def strings():
  return  [
    ## Please leave _DISTRONAME_ as it is, it's a placeholder.
    ("Lstart", _("Start _DISTRONAME_").replace("_DISTRONAME_", volumename)),
    ("Lmemtest", _("Memory Test")),
    ("Lchangelang", _("Change language")),
    ("Lchangekb", _("Change keyboard layout")),
    ("Lchangetz", _("Change time zone")),
    ("Lcheatcode", _("Change boot options")),
    ("Lrunlevel3", _("Boot to runlevel '3' (text mode)")),
    ("Lrunlevel4", _("Boot to runlevel '4' (graphical login) (default)")),
    ("Lenmemonly", _("Enable 'Copy everything to RAM'")),
    ("Ldismemonly", _("Disable 'Copy everything to RAM' (default)")),
    ("Lennumlock", _("Enable numlock on boot")),
    ("Ldisnumlock", _("Disable numlock on boot (default)")),
    ("Lenibus", _("Enable Ibus")),
    ("Ldisibus", _("Disable Ibus (default)")),
    ("Lensynaptics", _("Enable synaptics fdi (sometimes unreliable)")),
    ("Ldissynaptics", _("Disable synaptics fdi (reliable) (default)")),
    ("Lennosound", _("No sound on boot")),
    ("Ldisnosound", _("Enable sound on boot (default)")),
    ("Lenautologin", _("Enable autologin on boot (default)")),
    ("Ldisautologin", _("Disable autologin on boot")),
    ("Lengfxpayload", _("Enable gfxpayload=keep (default)")),
    ("Ldisgfxpayload", _("Disable gfxpayload=keep (if it doesn't load try this)")),
    ("Lpassword", _("Change root password")),
    ("Lpasswordask", _("New root password (choose 'ask' to be asked at boot): ")),
    ("Lproxy", _("Set a proxy")),
    ("Lproxyask", _("New proxy (empty for no proxy): ")),
    ("Lfromiso", _("Boot from an ISO")),
    ("Lfromisoask", _("Path to the ISO to boot from: ")),
    ("Lliveloading", _("Live system is loading...")),
    ("Lback", _("Return to boot menu")),
    ("Lsavesettings", _("Save all settings to be autoloaded for future boots")),
    ("Lskiplang", _("Do you want to skip the language selection menu? [y/N] ")),
    ("Linvalrep", _("Invalid response")),
    ("Lsaveenverr", _("There was an error saving your settings. Are the live files located on a writeable media like an USB key (i.e. not a CDROM)?")),
    ("Lcustomparam", _("Custom linux kernel parameters")),
    ("Lcustomparamask", _("Enter custom linux kernel parameters: ")),
    ("Lyes", _("y")),
    ("LYES", _("Y")),
    ("Lno", _("n")),
    ("LNO", _("N")),
  ]

kbmenuentry = """
menuentry "%s"%s {
  set kb="%s"
  set kbnum="%d"
  nextconfig
}
"""

langmenuentry = """
menuentry "%s"%s {
  set locale="%s"
  set lang="%s"
  set langnum="%s"
  set kb="%s"
  set kbnum="%d"
  nextconfig
}
"""

zonemenuentry = """
menuentry "%s" {
  set timezone="%s"
  nextconfig
}
"""

timezonemenuentry = """
menuentry "%s" {
  set timezone="${timezone}/%s"
  nextconfig
}
"""

# which field to display as name
displayname = 'nativename'

# the sort order used by getlangavail, i.e. by the language menu
langsortkey = displayname

# put here the locale of the lang to set as default
defaultlang = 'en_US'

defaulttz = 'UTC'

##################################
##       EDIT ABOVE HERE        ##
##################################
##################################


langdict = [ 'locale', 'name', 'nativename', 'kb' ]

# returns a sorted list of dictionaries describing the available langs
# If nativename is empty it changes it to equal name.
def getlangavail():
  temp = [dict(zip(langdict, lang)) for lang in langavailable]
  for lang in temp:
    if lang['nativename'] == None:
      lang['nativename'] = lang['name']
  return sorted(temp, key=lambda lang: lang[langsortkey])

# returns a sorted dict of all available kb layouts
def getkbs():
  tempkbs = []
  for lang in getlangavail():
    for kb in lang['kb']:
      tempkbs.append(kb)
  tempkbs = sorted(set(tempkbs)) # ensure we have no duplicates
  return dict(enumerate(tempkbs))

# returns a sorted list of all available time zones (by zone)
def gettimezones():
  zones = sorted(map(os.path.basename, filter(lambda f: os.path.isdir(f), glob.glob('/usr/share/zoneinfo/[A-Z]*'))))
  tz = []
  for z in zones:
    tz.append((z, sorted(map(os.path.basename, glob.glob('/usr/share/zoneinfo/' + z + '/*')))))
  return tz

# This is the inverse dictionary for a given dict
# i.e. 'de' -> 0 instead of 0 -> 'de'
# In map each value needs to be unique
def inversedict(map):
  return dict((v, k) for k, v in map.iteritems())

# Generates the <locale>.cfg files containing the translations.
def genlocalecfg(targetdir, locale):
  os.environ['LANGUAGE'] = locale # force use of another locale
  localefile = os.path.join(targetdir, locale + '.cfg')
  with open(localefile, 'w') as f:
    for string in strings():
      f.write("set " + string[0] + "=\"" + string[1] +"\"\n")
  f.close()

# Generates the file cfg using tpl as header and kbmenuentry as
# template for each keyboard layout in kbs.
def genkbcfg(tpl, cfg, kbs):
  with open(tpl, 'r') as ftpl:
    with open(cfg, 'w') as fcfg:
      fcfg.write(ftpl.read())
      lasthotkey = ''
      for k, v in kbs.iteritems():
        hotkey = str.lower(v[0])
        if hotkey == lasthotkey or hotkey in [ 'c', 'e' ]:
          hotkey = ''
        if hotkey != '':
          lasthotkey = hotkey
          hotkey = ' --hotkey ' + hotkey
        fcfg.write(kbmenuentry % (v, hotkey, v, k))

def genlangcfg(tpl, cfg, langs, invkbs, deflangnum, invlanglocale):
  with open(tpl, 'r') as ftpl:
    with open(cfg, 'w') as fcfg:
      fcfg.write(ftpl.read())
      fcfg.write('\n')
      fcfg.write('if [ "x${langnum}" = "x" ]; then\n')
      fcfg.write('  set locale=%s\n' % defaultlang)
      fcfg.write('  set lang=%s\n' % str.replace(defaultlang, '.utf8', ''))
      fcfg.write('  set langnum=%d\n' % deflangnum)
      fcfg.write('fi\n')
      fcfg.write('set default=${langnum}\n')
      lasthotkey = ''
      for l in langs:
        name = l['nativename']
        hotkey = str.lower(name[0])
        if hotkey == lasthotkey or hotkey in [ 'c', 'e' ]:
          hotkey = ''
        if hotkey != '':
          lasthotkey = hotkey
          hotkey = ' --hotkey ' + hotkey
        loc = l['locale']
        lang = str.replace(loc, '.utf8', '')
        num = invlanglocale[loc]
        kb = l['kb'][0]  # first element is the default
        kbnum = invkbs[kb]  # look the position up
        fcfg.write(langmenuentry % (name, hotkey, loc, lang, num, kb, kbnum))

def genzones(tpl, cfg, timezones):
  with open(tpl, 'r') as ftpl:
    with open(cfg, 'w') as fcfg:
      fcfg.write(ftpl.read())
      fcfg.write('\n')
      for tz in timezones:
        zone = tz[0]
        fcfg.write(zonemenuentry % (zone, zone))

def gentimezone(tpl, tzdir, zone, cities):
  with open(tpl, 'r') as ftpl:
    with open(tzdir + '/' + zone + '.cfg', 'w') as fcfg:
      fcfg.write(ftpl.read())
      fcfg.write('\n')
      for city in cities:
        fcfg.write(timezonemenuentry % (city, city))

def main():
  if sys.argv[1] == 'dumpkbs':
    for k, kb in getkbs().iteritems():
      print kb
    sys.exit()
  
  for dir in [localecfgdir, cfgdir, kbdir]:
    if not os.path.isdir(dir):
      os.makedirs(dir)
  
  if kbdir == '':
    print "error: you must set kbdir"

  kbs = getkbs()
  invkbs = inversedict(getkbs())
  langs = getlangavail()
  invlanglocale = inversedict(dict(enumerate([lang['locale'] for lang in langs])))
  deflangnum = invlanglocale[defaultlang]
  timezones = gettimezones()

  # now let's create our locale files, etc for each locale
  for lang in langs:
    genlocalecfg(localecfgdir, lang['locale'])

  genkbcfg(kbtpl, kbcfg, kbs)
  genlangcfg(langtpl, langcfg, langs, invkbs, deflangnum, invlanglocale)
  genzones(zonetpl, timezonecfg, timezones)
  for tz in timezones:
    gentimezone(tztpl, tzdir, tz[0], tz[1])
  
  for k, v in kbs.iteritems():
    os.chdir(kbdir)
    os.system('grub-kbdcomp ' + v)
    if os.path.isfile(v + '.gkb') and os.stat(v + '.gkb').st_size == 0:
      os.remove(v + '.gkb')

main()
