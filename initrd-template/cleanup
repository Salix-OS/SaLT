#!/bin/sh
# vim: set syn=sh ai et sw=2 st=2 ts=2 tw=0:
#
# This file is part of SaLT.
# Copyright: Cyrille Pontvieux <jrd@salixos.org>
# Licence: GPLv3+
# Version: 0.1
# Clean up script launched when coming back to the initrd of SaLT before halting or rebooting.

PATH=:/usr/sbin:/usr/bin:/sbin:/bin
export PATH
if [ -f /lib/libSaLT ]; then
  . /lib/libSaLT
elif [ -f /mnt/salt/lib/libSaLT ]; then
  . /mnt/salt/lib/libSaLT
else
  echo "libSaLT not found, cannot proceed further" >&2
  exit 1
fi

echodebug "cleanup: called with: $0 $@"
orig=/hooks/$(basename $0)
echo "$@"|grep -q -- -w
if [ $? -eq 0 ]; then
  echodebug "cleanup: '-w' detected, will run: $orig $@"
  "$orig" "$@"
  exit $?
fi

RL=$(runlevel|cut -d' ' -f2)
[ "$RL" = "unknown" ] && RL=$RUNLEVEL
[ -z "$RL" ] && RL=$runlevel
[ -z "$RL" ] && RL=0
if [ "$RL" -ne 0 -a "$RL" -ne 6 ]; then
  echodebug "cleanup: not in runlevel 0 or 6, will exec: $orig $@"
  exec "$orig" "$@"
  exit 0
fi

cd /

if [ -z "$SALT_CLEANUP_IS_RUNNING" ]; then
  if [ ! -e /mnt/salt ]; then
    fumble "/mnt/salt not found. This is really weird.\nAre you running from a Live environment?"
  else
    SALT_CLEANUP_IS_RUNNING=1
    export SALT_CLEANUP_IS_RUNNING
    [ -z "$SALT_DEBUG" ] && echo -en '\e[H\e[2J'
    echoinfo "*** Live system cleanup ***\n"
    grep -q -w '/mnt/salt' /etc/mtab || (mount -o remount,rw / && echo 'rootfs /mnt/salt rootfs ro 0 0' >> /etc/mtab && mount -o remount,ro /)
    echodebug "Rexecuting in chroot: $0 $@"
    change_root_to_initrd /cleanup "$0" "$@"
    fumble 'Rexecuting cleanup: this line must never be executed!'
  fi
fi

CMD="$@"
export CMD
if [ ! -e /tmp/distro_infos ]; then
  fumble "/tmp/distro_infos not found. This is really weird.\nAre you running from a Live environment?"
fi

# ensure / and /mnt/union are writable.
touch /testrw 2>/dev/null
[ -e /testrw ] && rm /testrw || mount -o remount,rw /
debugshell
debuglog 'Remounting /mnt/union read/write'
mount -o remount,rw /mnt/union

infolog 'Untweaking target distro'
# remove any /mnt/union/dev/initctl file
rm -f /mnt/union/dev/initctl
# remove symlinks to /mnt/union/salt/tmp when init is dynamically linked.
if [ -e /mnt/union/init-hooks.salt ]; then
  sh /mnt/union/init-hooks.salt
  rm -f /mnt/union/init-hooks.salt
fi
debugshell

infolog 'Synchronizing memory data on disk'
sync
infolog 'Killing remaining process'
kill_all_before $$
debugshell
debuglog 'Umount sub-mounts in /mnt/union'
umount_submounts_in /mnt/union
sleep 3
debugshell

infolog 'Unloading modules...'
for m in /mnt/modules/*; do
  infolog "  - Unloading $m"
  unload_module "$m"
  debugshell
done
rmdir /mnt/modules 2>/dev/null
debuglog 'Destroying union filesystem...'
destroy_union
rm /mnt/rw
if [ -e /mnt/ram ]; then
  if [ -e /sync-persistence ]; then
    dev=$(cut -d: -f1 /sync-persistence)
    relpath=$(cut -d: -f2 /sync-persistence)
    dir=$(mount_device $dev)
    debugshell
    if [ -e "$dir"/"$relpath" ]; then
      infolog 'Syncing RAM -> persistence file...'
      mkdir /mnt/sync
      mount -o loop "$dir"/"$relpath" /mnt/sync
      debugshell
      if [ $? -eq 0 ]; then
        SIZE_RAM=$(du -sm /mnt/ram|cut -f1)
        SIZE_SYNC=$(du -sm /mnt/sync|cut -f1)
        if [ $SIZE_RAM -lt $SIZE_SYNC ]; then
          cp -a /mnt/ram/* /mnt/ram/.??* /mnt/sync
          sync
          infolog "  $dir/$relpath synchronized"
        else
          errorlog "  Cannot sync to $dir/$relpath: not enough size (${SIZE_RAM}M)"
        fi
        umount /mnt/sync
      else
        errorlog "  Cannot mount $dir/$relpath: bad persistence file"
      fi
      rmdir /mnt/sync
    fi
    umount_device $dev
  fi
  umount /mnt/ram || umount -l /mnt/ram
  rmdir /mnt/ram
elif [ -e /mnt/save ]; then
  umount /mnt/save || umount -l /mnt/save
  rmdir /mnt/save
fi
[ -e /tmp/modules ] && rm -rf /tmp/modules 2>/dev/null
debugshell

umount_device $(cut -d: -f2- /tmp/distro_infos) >/dev/null
debugshell
eject_cd
debugshell

debuglog 'Umount what remains'
sync
umount -a -r -d -l 2>/dev/null
debugshell

echoinfo "Stopping/Rebooting: $CMD"
debugshell
sync
sleep 1
exec "$CMD" -f
fumble 'End of cleanup: this line must never be executed!'
