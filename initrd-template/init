#!/bin/sh
# vim: set syn=sh ai si et sw=2 st=2 ts=2 tw=0:
#
# This file is part of SaLT.
# Copyright: Cyrille Pontvieux <jrd@salixos.org>
# Licence: GPLv3+
# Version: 0.2.1
# Initial script launched in the initrd of SaLT

[ "$$" -ne 1 ] && exit 1;
args="$@"

SALT_VER=$(cat /salt-version)
echo -e -n "\n\e[1;36mSaLT v$SALT_VER initializing... "
PATH=:/usr/sbin:/usr/bin:/sbin:/bin
export PATH

# mount -n : /etc/mtab is not writable yet
mount -n -t proc none /proc
mount -n -t sysfs none /sys
# ensure / is writable.
mount -o remount,rw /
# update /etc/mtab regarding /proc and /sys mount points
echo 'none /proc proc rw 0 0' >> /etc/mtab
echo 'none /sys sysfs rw 0 0' >> /etc/mtab

mount -t tmpfs none /tmp
(
  cd /tmp
  tar xf /lib.tar.*
  rm /lib.tar.*
  [ ! -d /lib ] && mkdir /lib
  cd /lib
  # relative path
  ln -s ../tmp/lib/* .
)

# load the SaLT library
. /lib/libSaLT
if [ $(mount | grep ' on / ' | wc -l) -eq 1 ]; then
  echoerror 'Error'
  fumble "You cannot use initramfs with SaLT, only initrd is supported."
else
  echoinfo 'Done'
fi
if [ -z "$SALT_DEBUG" ]; then
  salt="   S a L T   -   v$SALT_VER   "
  line=''
  spcs=''
  for i in $(seq 1 $(expr length "$salt")); do
    line="${line}━"
    spcs="${spcs} "
  done
  clear
  echocolornl $COLOR_BOLD $COLOR_BLUE "  ┏━$line━┓"
  echocolornl $COLOR_BOLD $COLOR_BLUE "  ┃ $spcs ┃"
  echocolor   $COLOR_BOLD $COLOR_BLUE "  ┃"
  echocolor   $COLOR_BOLD $COLOR_CYAN    " $salt "
  echocolornl $COLOR_BOLD $COLOR_BLUE           "┃ "
  echocolornl $COLOR_BOLD $COLOR_BLUE "  ┃ $spcs ┃"
  echocolornl $COLOR_BOLD $COLOR_BLUE "  ┗━$line━┛"
  echo
  unset salt line spcs
fi
echoinfo "*** Starting Live initialization ***"

cd /
klogd -c 3
infolog 'Loading essential kernel modules...'
load_core_modules
infolog 'Initialize /dev'
init_dev
infolog 'Starting USB support'
load_usb_modules
infolog 'Starting PCMCIA CardBus support'
load_pcmcia_modules

if [ -e /init_extra ]; then
  debuglog "Starting /init_extra"
  debugshell
  sh /init_extra
fi

infolog "Finding $LIVE_NAME device..."
debugshell
get_ident_file
get_ident_content
get_fromiso
DISTRO_INFO=$(find_distro_device)
if [ -z "$DISTRO_INFO" ]; then
  fumble "Could not find the distro to boot\nFile searched: $IDENT_FILE\nContent searched: $IDENT_CONTENT"
fi
DISTRO_MP=$(echo $DISTRO_INFO|cut -d: -f1)
DISTRO_DEV=$(echo $DISTRO_INFO|cut -d: -f2-)
infolog "  $LIVE_NAME found in $DISTRO_DEV"
BASEDIR="$(get_basedir $DISTRO_MP)"
if [ $? -eq 0 ]; then
  debuglog "Using as basedir: '$BASEDIR'"
  debuglog "Using as ROOT_DIR: '$ROOT_DIR'"
else
  errorlog "Could not determine 'basedir' from ident file."
fi
debugshell

get_save_file_name
infolog "Finding save file $SAVE_FILE_NAME..."
debugshell
SAVE_FILE=$(find_save_file $DISTRO_MP)
if [ -z "$SAVE_FILE" ]; then
  warnlog '  Save file not found, using memory only'
  mkdir -p /mnt/ram
  mount -t tmpfs none /mnt/ram
  (cd /mnt && ln -sf ram rw)
else
  infolog "  Save file found: $SAVE_FILE"
  mkdir -p /mnt/save
  mount -o loop $SAVE_FILE /mnt/save
  if [ $? -ne 0 ]; then
    errorlog "  Cannot mount $SAVE_FILE, using memory instead"
    rmdir /mnt/save
    mkdir -p /mnt/ram
    mount -t tmpfs none /mnt/ram
    (cd /mnt && ln -sf ram rw)
  else
    (cd /mnt && ln -sf save rw)
  fi
fi

debuglog 'Creating union filesystem'
create_union /mnt/rw || fumble 'Cannot create union filesystem'
debugshell
infolog 'Finding SaLT modules...'
for m in $(find_modules $DISTRO_MP); do
  infolog "  - Loading $m"
  load_module "$m" || errorlog "$m cannot be loaded"
  debugshell
done
# Try loading rootcopy.tar or rootcopy directory
load_rootcopy $DISTRO_MP
# Execute /mnt/union/salt-exec.sh if exist and is executable
[ -x /mnt/union/salt-exec.sh ] && sh /mnt/union/salt-exec.sh

if is_on_cmdline 'memonly'; then
  debuglog "Umounting $DISTRO_MP for using memory only"
  # This could not work if, for example, the save file is on $DISTRO_MP
  umount $DISTRO_MP 2>/dev/null && rmdir $DISTRO_MP 2>/dev/null
fi

debuglog 'Installing hooks in /mnt/union...'
install_hooks /mnt/union
debugshell
infolog 'Tweaking the target distro'
make_tweaks /mnt/union
debugshell

[ -z "$SALT_DEBUG" ] && clear
echoinfo "*** Passing execution process to $LIVE_NAME ***\n"
INIT=
for d in . sbin bin usr/sbin usr/bin; do
  if [ -x /mnt/union/$d/init ]; then
    INIT=$d/init
    break
  fi
done
if [ -z "$INIT" ]; then
  fumble "Could not find 'init' in the union filesystem: could not chroot"
else
  cp /mnt/union/$INIT /tmp/init
  ln -s tmp/init init.distro
  file tmp/init | grep -q 'dynamically linked'
  if [ $? -eq 0 ]; then
    debuglog '"init" is dynamically linked, "ld" and "libc" must be moved to /tmp'
    LIBDIR=/mnt/union/lib
    [ -d /mnt/union/lib64 ] && LIBDIR=/mnt/union/lib64
    rm -f /mnt/union/init-hooks.salt
    LD=$(ls -1 $LIBDIR/ld-[0-9]*)
    if [ -f "$LD" ] && [ ! -e "$LD.saltbak" ]; then
      cp $LD $LD.saltbak
      mv $LD /tmp/
      ( cd $LIBDIR; ln -s /mnt/salt/tmp/$(basename $LD) . )
      LD=$(echo "$LD"|sed 's:/mnt/union/::')
      cat <<EOF >> /mnt/union/init-hooks.salt
if [ -e "$LD.saltbak" ]; then
  rm -f "$LD"
  mv "$LD.saltbak" "$LD"
fi

EOF
    fi
    unset LD
    LIBC=$(ls -1 $LIBDIR/libc-[0-9]*)
    if [ -f "$LIBC" ] && [ ! -e "$LIBC.saltbak" ]; then
      cp $LIBC $LIBC.saltbak
      mv $LIBC /tmp/
      ( cd $LIBDIR; ln -s /mnt/salt/tmp/$(basename $LIBC) . )
      LIBC=$(echo "$LIBC"|sed 's:/mnt/union/::')
      cat <<EOF >> /mnt/union/init-hooks.salt
if [ -e "$LIBC.saltbak" ]; then
  rm -f "$LIBC"
  mv "$LIBC.saltbak" "$LIBC"
fi

EOF
    fi
    unset LIBC
    unset LIBDIR
  fi
  killall klogd
  debugshell
  change_root_to_distro /mnt/salt/init.distro $args
fi
fumble 'End of init: this line must never be executed!'
