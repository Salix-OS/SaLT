#!/bin/sh
# vim: set syn=sh ai si et sw=2 st=2 ts=2 tw=0:
#
# This file is part of SaLT.
# Copyright: Cyrille Pontvieux <jrd@salixos.org>
# Licence: GPLv3+
# Version: 0.2.1
# Initial script launched in the initrd of SaLT

[ "$$" -ne 1 ] && exit 1;
args="$@"

echo -e -n '\n\e[1;36mSaLT v0.1 initializing... '
PATH=:/usr/sbin:/usr/bin:/sbin:/bin
export PATH

# mount -n : /etc/mtab is not writable yet
mount -n -t proc none /proc
mount -n -t sysfs none /sys
# ensure / is writable.
mount -o remount,rw /
# update /etc/mtab regarding /proc and /sys mount points
echo 'none /proc proc rw 0 0' >> /etc/mtab
echo 'none /sys sysfs rw 0 0' >> /etc/mtab

mount -t tmpfs none /tmp
(
  cd /tmp
  tar xf /lib.tar.*
  rm /lib.tar.*
  [ ! -d /lib ] && mkdir /lib
  cd /lib
  # relative path
  ln -s ../tmp/lib/* .
)

# load the SaLT library
. /lib/libSaLT
if [ $(mount | grep ' on / ' | wc -l) -eq 1 ]; then
  echo -e "\e[1;31mError\e[0m"
  fumble "You cannot use initramfs with SaLT, only initrd is supported."
else
  echo -e "\e[1;32mDone\e[0m"
fi
[ -z "$SALT_DEBUG" ] && clear
echoinfo "*** Starting Live initialization ***"

cd /
klogd -c 3
infolog 'Loading essential kernel modules...'
load_core_modules
infolog 'Initialize /dev'
init_dev
infolog 'Starting USB support'
load_usb_modules
infolog 'Starting PCMCIA CardBus support'
load_pcmcia_modules

[ -e /init_extra ] && sh /init_extra

infolog "Finding $LIVE_NAME device..."
get_ident_file
get_ident_content
get_fromiso
DISTRO_INFO=$(find_distro_device)
if [ -z "$DISTRO_INFO" ]; then
  fumble "Could not find the distro to boot\nFile searched: $IDENT_FILE\nContent searched: $IDENT_CONTENT"
fi
DISTRO_MP=$(echo $DISTRO_INFO|cut -d: -f1)
DISTRO_DEV=$(echo $DISTRO_INFO|cut -d: -f2-)
infolog "  $LIVE_NAME found in $DISTRO_DEV"
BASEDIR="$(get_basedir $DISTRO_MP)"
if [ $? -eq 0 ]; then
  debuglog "Using as basedir: '$BASEDIR'"
  debuglog "Using as ROOT_DIR: '$ROOT_DIR'"
else
  errorlog "Could not determine 'basedir' from ident file."
fi
debugshell

get_save_file_name
infolog "Finding save file $SAVE_FILE_NAME..."
SAVE_FILE=$(find_save_file $DISTRO_MP)
if [ -z "$SAVE_FILE" ]; then
  warnlog '  Save file not found, using memory only'
  mkdir -p /mnt/ram
  mount -t tmpfs none /mnt/ram
  (cd /mnt && ln -sf ram rw)
else
  infolog "  Save file found: $SAVE_FILE"
  mkdir -p /mnt/save
  mount -o loop $SAVE_FILE /mnt/save
  if [ $? -ne 0 ]; then
    errorlog "  Cannot mount $SAVE_FILE, using memory instead"
    rmdir /mnt/save
    mkdir -p /mnt/ram
    mount -t tmpfs none /mnt/ram
    (cd /mnt && ln -sf ram rw)
  else
    (cd /mnt && ln -sf save rw)
  fi
fi

debuglog 'Creating union filesystem'
create_union /mnt/rw || fumble 'Cannot create union filesystem'
debugshell
infolog 'Finding SaLT modules...'
for m in $(find_modules $DISTRO_MP); do
  infolog "  - Loading $m"
  load_module "$m" || errorlog "$m cannot be loaded"
  debugshell
done
# Try loading rootcopy.tar or rootcopy directory
load_rootcopy $DISTRO_MP
# Execute /mnt/union/salt-exec.sh if exist and is executable
[ -x /mnt/union/salt-exec.sh ] && sh /mnt/union/salt-exec.sh

if is_on_cmdline 'memonly'; then
  debuglog "Umounting $DISTRO_MP for using memory only"
  # This could not work if, for example, the save file is on $DISTRO_MP
  umount $DISTRO_MP 2>/dev/null && rmdir $DISTRO_MP 2>/dev/null
fi

infolog 'Tweaking the target distro'
debuglog 'Installing hookers in /mnt/union...'
install_hookers /mnt/union
debugshell
[ -e /mnt/union/etc ] || mkdir -p /mnt/union/etc
debuglog 'Disabling root filesystem check'
touch /mnt/union/etc/fastboot
rm -f /mnt/union/etc/forcefsck
debuglog 'Fixing a bug in /etc/rc.d/rc.S Slackware for hardware clock'
[ -e /mnt/union/etc/hardwareclock ] || touch /mnt/union/etc/hardwareclock
debuglog 'Fixing a bug when /etc/fstab is missing sometimes'
[ -e /mnt/union/etc/fstab ] || touch /mnt/union/etc/fstab
debuglog 'Fixing a bug when /proc and /sys will sometimes not be mounted in chroot'
[ -d /mnt/union/proc ] || mkdir -p /mnt/union/proc
mount -n -t proc none /mnt/union/proc
[ -d /mnt/union/sys ] || mkdir -p /mnt/union/sys
mount -n -t sysfs none /mnt/union/sys
debuglog 'Fixing a bug when / is trying to be fsck'
if [ ! -x /mnt/union/sbin/fsck.aufs ]; then
  [ -d /mnt/union/sbin ] || mkdir -p /mnt/union/sbin
  cat <<EOF > /mnt/union/sbin/fsck.aufs
#!/bin/sh
# This is for having no error at boot when using fsck -C -a / on a aufs root mount point.
EOF
  chmod +x /mnt/union/sbin/fsck.aufs
fi
debuglog 'Making rc.salt running at boot'
if [ -e /mnt/union/etc/rc.d/rc.M ]; then
  if [ -w /mnt/union/etc/rc.d/rc.M ]; then
    if ! grep -q 'rc\.salt' /mnt/union/etc/rc.d/rc.M; then
      echo -e "\n\n#SaLT\n[ -x /mnt/salt/lib/rc.salt ] && . /mnt/salt/lib/rc.salt" >> /mnt/union/etc/rc.d/rc.M
      chmod u+x /lib/rc.salt
    fi
  else
    errorlog "/etc/rc.d/rc.M does not seem to be writable in the distro: cheatcodes will not work."
  fi
else
  errorlog "/etc/rc.d/rc.M does not seem to exist in the distro: cheatcodes will not work."
fi
debuglog 'Early configure locale'
lang=$(get_value_cmdline lang)
if [ -n "$lang" ] && [ -e /mnt/union/etc/profile.d ]; then
  if [ -f /mnt/union/etc/profile.d/lang.sh ]; then
    grep -q -i '^ *export LANG=' /mnt/union/etc/profile.d/lang.sh
    if [ $? -eq 0 ]; then
      sed -i "s/^ *\(export LANG=\).*$/\1$lang/" /mnt/union/etc/profile.d/lang.sh
    else
      echo "export LANG=$lang" >> /mnt/union/etc/profile.d/lang.sh
    fi
  fi
  if [ -f /mnt/union/etc/profile.d/lang.csh ]; then
    grep -q -i '^ *setenv LANG ' /mnt/union/etc/profile.d/lang.csh
    if [ $? -eq 0 ]; then
      sed -i "s/^ *\(setenv LANG \).*$/\1$lang/" /mnt/union/etc/profile.d/lang.csh
    else
      echo "setenv LANG $lang" >> /mnt/union/etc/profile.d/lang.csh
    fi
  fi
  if [ -f /mnt/union/etc/kde/kdm/kdmrc ]; then
    locale_noutf8=$(echo $lang | sed 's/\.utf8//')
    sed -i "s/\(^\|^#\)Language=.*/Language=$locale_noutf8/" /mnt/union/etc/kde/kdm/kdmrc
  fi
fi
debuglog 'Informing that / is already mounted in the /mnt/union'
echo 'salt / aufs ro 0 0' > /mnt/union/etc/mtab

[ -z "$SALT_DEBUG" ] && clear
echoinfo "*** Passing execution process to $LIVE_NAME ***\n"
INIT=
for d in . sbin bin usr/sbin usr/bin; do
  if [ -x /mnt/union/$d/init ]; then
    INIT=$d/init
    break
  fi
done
if [ -z "$INIT" ]; then
  fumble "Could not find 'init' in the union filesystem: could not chroot"
else
  cp /mnt/union/$INIT /tmp/init
  ln -s tmp/init init.distro
  file tmp/init | grep -q 'dynamically linked'
  if [ $? -eq 0 ]; then
    debuglog '"init" is dynamically linked, "ld" and "libc" must be moved to /tmp'
    LIBDIR=/mnt/union/lib
    [ -d /mnt/union/lib64 ] && LIBDIR=/mnt/union/lib64
    rm -f /mnt/union/init-hooks.salt
    LD=$(ls -1 $LIBDIR/ld-[0-9]*)
    if [ -f "$LD" ] && [ ! -e "$LD.saltbak" ]; then
      cp $LD $LD.saltbak
      mv $LD /tmp/
      ( cd $LIBDIR; ln -s /mnt/salt/tmp/$(basename $LD) . )
      LD=$(echo "$LD"|sed 's:/mnt/union/::')
      cat <<EOF >> /mnt/union/init-hooks.salt
if [ -e "$LD.saltbak" ]; then
  rm -f "$LD"
  mv "$LD.saltbak" "$LD"
fi

EOF
    fi
    unset LD
    LIBC=$(ls -1 $LIBDIR/libc-[0-9]*)
    if [ -f "$LIBC" ] && [ ! -e "$LIBC.saltbak" ]; then
      cp $LIBC $LIBC.saltbak
      mv $LIBC /tmp/
      ( cd $LIBDIR; ln -s /mnt/salt/tmp/$(basename $LIBC) . )
      LIBC=$(echo "$LIBC"|sed 's:/mnt/union/::')
      cat <<EOF >> /mnt/union/init-hooks.salt
if [ -e "$LIBC.saltbak" ]; then
  rm -f "$LIBC"
  mv "$LIBC.saltbak" "$LIBC"
fi

EOF
    fi
    unset LIBC
    unset LIBDIR
  fi
  killall klogd
  debugshell
  change_root_to_distro /mnt/salt/init.distro $args
fi
fumble 'End of init: this line must never be executed!'
